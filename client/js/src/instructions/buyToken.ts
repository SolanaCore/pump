/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PUMP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const BUY_TOKEN_DISCRIMINATOR = new Uint8Array([
  138, 127, 14, 91, 38, 87, 115, 105,
]);

export function getBuyTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BUY_TOKEN_DISCRIMINATOR);
}

export type BuyTokenInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountTokenAta extends string | IAccountMeta<string> = string,
  TAccountTokenEscrow extends string | IAccountMeta<string> = string,
  TAccountBondingCurve extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountTokenAta extends string
        ? WritableAccount<TAccountTokenAta>
        : TAccountTokenAta,
      TAccountTokenEscrow extends string
        ? ReadonlyAccount<TAccountTokenEscrow>
        : TAccountTokenEscrow,
      TAccountBondingCurve extends string
        ? ReadonlyAccount<TAccountBondingCurve>
        : TAccountBondingCurve,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BuyTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  maxSol: bigint;
};

export type BuyTokenInstructionDataArgs = { maxSol: number | bigint };

export function getBuyTokenInstructionDataEncoder(): Encoder<BuyTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxSol', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BUY_TOKEN_DISCRIMINATOR })
  );
}

export function getBuyTokenInstructionDataDecoder(): Decoder<BuyTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxSol', getU64Decoder()],
  ]);
}

export function getBuyTokenInstructionDataCodec(): Codec<
  BuyTokenInstructionDataArgs,
  BuyTokenInstructionData
> {
  return combineCodec(
    getBuyTokenInstructionDataEncoder(),
    getBuyTokenInstructionDataDecoder()
  );
}

export type BuyTokenAsyncInput<
  TAccountSigner extends string = string,
  TAccountTokenAta extends string = string,
  TAccountTokenEscrow extends string = string,
  TAccountBondingCurve extends string = string,
  TAccountTokenMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  tokenAta?: Address<TAccountTokenAta>;
  tokenEscrow?: Address<TAccountTokenEscrow>;
  bondingCurve?: Address<TAccountBondingCurve>;
  tokenMint: Address<TAccountTokenMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  maxSol: BuyTokenInstructionDataArgs['maxSol'];
};

export async function getBuyTokenInstructionAsync<
  TAccountSigner extends string,
  TAccountTokenAta extends string,
  TAccountTokenEscrow extends string,
  TAccountBondingCurve extends string,
  TAccountTokenMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: BuyTokenAsyncInput<
    TAccountSigner,
    TAccountTokenAta,
    TAccountTokenEscrow,
    TAccountBondingCurve,
    TAccountTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  BuyTokenInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountTokenAta,
    TAccountTokenEscrow,
    TAccountBondingCurve,
    TAccountTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    tokenAta: { value: input.tokenAta ?? null, isWritable: true },
    tokenEscrow: { value: input.tokenEscrow ?? null, isWritable: false },
    bondingCurve: { value: input.bondingCurve ?? null, isWritable: false },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenAta.value) {
    accounts.tokenAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.bondingCurve.value) {
    accounts.bondingCurve.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([66, 79, 78, 68, 73, 78, 71, 95, 67, 85, 82, 86, 69])
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.tokenEscrow.value) {
    accounts.tokenEscrow.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.bondingCurve.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.tokenAta),
      getAccountMeta(accounts.tokenEscrow),
      getAccountMeta(accounts.bondingCurve),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getBuyTokenInstructionDataEncoder().encode(
      args as BuyTokenInstructionDataArgs
    ),
  } as BuyTokenInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountTokenAta,
    TAccountTokenEscrow,
    TAccountBondingCurve,
    TAccountTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type BuyTokenInput<
  TAccountSigner extends string = string,
  TAccountTokenAta extends string = string,
  TAccountTokenEscrow extends string = string,
  TAccountBondingCurve extends string = string,
  TAccountTokenMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  tokenAta: Address<TAccountTokenAta>;
  tokenEscrow: Address<TAccountTokenEscrow>;
  bondingCurve: Address<TAccountBondingCurve>;
  tokenMint: Address<TAccountTokenMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  maxSol: BuyTokenInstructionDataArgs['maxSol'];
};

export function getBuyTokenInstruction<
  TAccountSigner extends string,
  TAccountTokenAta extends string,
  TAccountTokenEscrow extends string,
  TAccountBondingCurve extends string,
  TAccountTokenMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: BuyTokenInput<
    TAccountSigner,
    TAccountTokenAta,
    TAccountTokenEscrow,
    TAccountBondingCurve,
    TAccountTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BuyTokenInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountTokenAta,
  TAccountTokenEscrow,
  TAccountBondingCurve,
  TAccountTokenMint,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    tokenAta: { value: input.tokenAta ?? null, isWritable: true },
    tokenEscrow: { value: input.tokenEscrow ?? null, isWritable: false },
    bondingCurve: { value: input.bondingCurve ?? null, isWritable: false },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.tokenAta),
      getAccountMeta(accounts.tokenEscrow),
      getAccountMeta(accounts.bondingCurve),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getBuyTokenInstructionDataEncoder().encode(
      args as BuyTokenInstructionDataArgs
    ),
  } as BuyTokenInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountTokenAta,
    TAccountTokenEscrow,
    TAccountBondingCurve,
    TAccountTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedBuyTokenInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    tokenAta: TAccountMetas[1];
    tokenEscrow: TAccountMetas[2];
    bondingCurve: TAccountMetas[3];
    tokenMint: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    associatedTokenProgram: TAccountMetas[7];
  };
  data: BuyTokenInstructionData;
};

export function parseBuyTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedBuyTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      tokenAta: getNextAccount(),
      tokenEscrow: getNextAccount(),
      bondingCurve: getNextAccount(),
      tokenMint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getBuyTokenInstructionDataDecoder().decode(instruction.data),
  };
}
