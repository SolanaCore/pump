/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PUMP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INIT_GLOBAL_CONFIG_DISCRIMINATOR = new Uint8Array([
  140, 136, 214, 48, 87, 0, 120, 255,
]);

export function getInitGlobalConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_GLOBAL_CONFIG_DISCRIMINATOR
  );
}

export type InitGlobalConfigInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountGlobalConfig extends string | IAccountMeta<string> = string,
  TAccountSigner extends
    | string
    | IAccountMeta<string> = '52nvBaMXujpVYf6zBUvmQtHEZc4kAncRJccXG99F6yrg',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountGlobalConfig extends string
        ? WritableAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitGlobalConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitGlobalConfigInstructionDataArgs = {};

export function getInitGlobalConfigInstructionDataEncoder(): Encoder<InitGlobalConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INIT_GLOBAL_CONFIG_DISCRIMINATOR })
  );
}

export function getInitGlobalConfigInstructionDataDecoder(): Decoder<InitGlobalConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitGlobalConfigInstructionDataCodec(): Codec<
  InitGlobalConfigInstructionDataArgs,
  InitGlobalConfigInstructionData
> {
  return combineCodec(
    getInitGlobalConfigInstructionDataEncoder(),
    getInitGlobalConfigInstructionDataDecoder()
  );
}

export type InitGlobalConfigAsyncInput<
  TAccountGlobalConfig extends string = string,
  TAccountSigner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  globalConfig?: Address<TAccountGlobalConfig>;
  signer?: TransactionSigner<TAccountSigner>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitGlobalConfigInstructionAsync<
  TAccountGlobalConfig extends string,
  TAccountSigner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: InitGlobalConfigAsyncInput<
    TAccountGlobalConfig,
    TAccountSigner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitGlobalConfigInstruction<
    TProgramAddress,
    TAccountGlobalConfig,
    TAccountSigner,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    globalConfig: { value: input.globalConfig ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.globalConfig.value) {
    accounts.globalConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 108, 111, 98, 97, 108, 95, 99, 111, 110, 102, 105, 103,
          ])
        ),
      ],
    });
  }
  if (!accounts.signer.value) {
    accounts.signer.value =
      '52nvBaMXujpVYf6zBUvmQtHEZc4kAncRJccXG99F6yrg' as Address<'52nvBaMXujpVYf6zBUvmQtHEZc4kAncRJccXG99F6yrg'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitGlobalConfigInstructionDataEncoder().encode({}),
  } as InitGlobalConfigInstruction<
    TProgramAddress,
    TAccountGlobalConfig,
    TAccountSigner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitGlobalConfigInput<
  TAccountGlobalConfig extends string = string,
  TAccountSigner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  globalConfig: Address<TAccountGlobalConfig>;
  signer?: TransactionSigner<TAccountSigner>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitGlobalConfigInstruction<
  TAccountGlobalConfig extends string,
  TAccountSigner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS,
>(
  input: InitGlobalConfigInput<
    TAccountGlobalConfig,
    TAccountSigner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitGlobalConfigInstruction<
  TProgramAddress,
  TAccountGlobalConfig,
  TAccountSigner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PUMP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    globalConfig: { value: input.globalConfig ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.signer.value) {
    accounts.signer.value =
      '52nvBaMXujpVYf6zBUvmQtHEZc4kAncRJccXG99F6yrg' as Address<'52nvBaMXujpVYf6zBUvmQtHEZc4kAncRJccXG99F6yrg'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitGlobalConfigInstructionDataEncoder().encode({}),
  } as InitGlobalConfigInstruction<
    TProgramAddress,
    TAccountGlobalConfig,
    TAccountSigner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitGlobalConfigInstruction<
  TProgram extends string = typeof PUMP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    globalConfig: TAccountMetas[0];
    signer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitGlobalConfigInstructionData;
};

export function parseInitGlobalConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitGlobalConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      globalConfig: getNextAccount(),
      signer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitGlobalConfigInstructionDataDecoder().decode(instruction.data),
  };
}
