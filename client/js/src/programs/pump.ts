/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedBuyTokenInstruction,
  type ParsedCreateTokenInstruction,
  type ParsedInitGlobalConfigInstruction,
  type ParsedSellTokenInstruction,
} from '../instructions';

export const PUMP_PROGRAM_ADDRESS =
  '52nvBaMXujpVYf6zBUvmQtHEZc4kAncRJccXG99F6yrg' as Address<'52nvBaMXujpVYf6zBUvmQtHEZc4kAncRJccXG99F6yrg'>;

export enum PumpAccount {
  BondingCurve,
  GlobalConfig,
}

export function identifyPumpAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PumpAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([23, 183, 248, 55, 96, 216, 172, 96])
      ),
      0
    )
  ) {
    return PumpAccount.BondingCurve;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 8, 156, 202, 160, 252, 176, 217])
      ),
      0
    )
  ) {
    return PumpAccount.GlobalConfig;
  }
  throw new Error(
    'The provided account could not be identified as a pump account.'
  );
}

export enum PumpInstruction {
  BuyToken,
  CreateToken,
  InitGlobalConfig,
  SellToken,
}

export function identifyPumpInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PumpInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([138, 127, 14, 91, 38, 87, 115, 105])
      ),
      0
    )
  ) {
    return PumpInstruction.BuyToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([84, 52, 204, 228, 24, 140, 234, 75])
      ),
      0
    )
  ) {
    return PumpInstruction.CreateToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([140, 136, 214, 48, 87, 0, 120, 255])
      ),
      0
    )
  ) {
    return PumpInstruction.InitGlobalConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([109, 61, 40, 187, 230, 176, 135, 174])
      ),
      0
    )
  ) {
    return PumpInstruction.SellToken;
  }
  throw new Error(
    'The provided instruction could not be identified as a pump instruction.'
  );
}

export type ParsedPumpInstruction<
  TProgram extends string = '52nvBaMXujpVYf6zBUvmQtHEZc4kAncRJccXG99F6yrg',
> =
  | ({
      instructionType: PumpInstruction.BuyToken;
    } & ParsedBuyTokenInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.CreateToken;
    } & ParsedCreateTokenInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.InitGlobalConfig;
    } & ParsedInitGlobalConfigInstruction<TProgram>)
  | ({
      instructionType: PumpInstruction.SellToken;
    } & ParsedSellTokenInstruction<TProgram>);
