/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from "@solana/kit";
import { PUMP_PROGRAM_ADDRESS } from "../programs";

/** OverflowDetected: Overflow detected */
export const PUMP_ERROR__OVERFLOW_DETECTED = 0x1770; // 6000
/** UnderflowDetected: Underflow detected */
export const PUMP_ERROR__UNDERFLOW_DETECTED = 0x1771; // 6001
/** InvalidTokenAmount: the token amount can't be zero */
export const PUMP_ERROR__INVALID_TOKEN_AMOUNT = 0x1772; // 6002
/** InvalidSolAmount: the sol amount can't be zero */
export const PUMP_ERROR__INVALID_SOL_AMOUNT = 0x1773; // 6003
/** InvalidInputs: Invalis Inputs check the that either name, ticker, uri or description are not empty */
export const PUMP_ERROR__INVALID_INPUTS = 0x1774; // 6004

export type PumpError =
  | typeof PUMP_ERROR__INVALID_INPUTS
  | typeof PUMP_ERROR__INVALID_SOL_AMOUNT
  | typeof PUMP_ERROR__INVALID_TOKEN_AMOUNT
  | typeof PUMP_ERROR__OVERFLOW_DETECTED
  | typeof PUMP_ERROR__UNDERFLOW_DETECTED;

let pumpErrorMessages: Record<PumpError, string> | undefined;
if (process.env.NODE_ENV !== "production") {
  pumpErrorMessages = {
    [PUMP_ERROR__INVALID_INPUTS]: `Invalis Inputs check the that either name, ticker, uri or description are not empty`,
    [PUMP_ERROR__INVALID_SOL_AMOUNT]: `the sol amount can't be zero`,
    [PUMP_ERROR__INVALID_TOKEN_AMOUNT]: `the token amount can't be zero`,
    [PUMP_ERROR__OVERFLOW_DETECTED]: `Overflow detected`,
    [PUMP_ERROR__UNDERFLOW_DETECTED]: `Underflow detected`,
  };
}

export function getPumpErrorMessage(code: PumpError): string {
  if (process.env.NODE_ENV !== "production") {
    return (pumpErrorMessages as Record<PumpError, string>)[code];
  }

  return "Error message not available in production bundles.";
}

export function isPumpError<TProgramErrorCode extends PumpError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    PUMP_PROGRAM_ADDRESS,
    code,
  );
}
