/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { assertAccountExists, assertAccountsExist, combineCodec, decodeAccount, fetchEncodedAccount, fetchEncodedAccounts, fixDecoderSize, fixEncoderSize, getBytesDecoder, getBytesEncoder, getStructDecoder, getStructEncoder, getU64Decoder, getU64Encoder, getU8Decoder, getU8Encoder, transformEncoder, } from "@solana/kit";
export const GLOBAL_CONFIG_DISCRIMINATOR = new Uint8Array([
    149, 8, 156, 202, 160, 252, 176, 217,
]);
export function getGlobalConfigDiscriminatorBytes() {
    return fixEncoderSize(getBytesEncoder(), 8).encode(GLOBAL_CONFIG_DISCRIMINATOR);
}
export function getGlobalConfigEncoder() {
    return transformEncoder(getStructEncoder([
        ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
        ["tokenToSell", getU64Encoder()],
        ["tokenToMint", getU64Encoder()],
        ["virtualTokenReserve", getU64Encoder()],
        ["virtualSolReserve", getU64Encoder()],
        ["bump", getU8Encoder()],
    ]), (value) => (Object.assign(Object.assign({}, value), { discriminator: GLOBAL_CONFIG_DISCRIMINATOR })));
}
export function getGlobalConfigDecoder() {
    return getStructDecoder([
        ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
        ["tokenToSell", getU64Decoder()],
        ["tokenToMint", getU64Decoder()],
        ["virtualTokenReserve", getU64Decoder()],
        ["virtualSolReserve", getU64Decoder()],
        ["bump", getU8Decoder()],
    ]);
}
export function getGlobalConfigCodec() {
    return combineCodec(getGlobalConfigEncoder(), getGlobalConfigDecoder());
}
export function decodeGlobalConfig(encodedAccount) {
    return decodeAccount(encodedAccount, getGlobalConfigDecoder());
}
export async function fetchGlobalConfig(rpc, address, config) {
    const maybeAccount = await fetchMaybeGlobalConfig(rpc, address, config);
    assertAccountExists(maybeAccount);
    return maybeAccount;
}
export async function fetchMaybeGlobalConfig(rpc, address, config) {
    const maybeAccount = await fetchEncodedAccount(rpc, address, config);
    return decodeGlobalConfig(maybeAccount);
}
export async function fetchAllGlobalConfig(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeGlobalConfig(rpc, addresses, config);
    assertAccountsExist(maybeAccounts);
    return maybeAccounts;
}
export async function fetchAllMaybeGlobalConfig(rpc, addresses, config) {
    const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeGlobalConfig(maybeAccount));
}
