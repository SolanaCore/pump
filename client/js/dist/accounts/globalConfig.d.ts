/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { fetchEncodedAccount, fetchEncodedAccounts, type Account, type Address, type Codec, type Decoder, type EncodedAccount, type Encoder, type FetchAccountConfig, type FetchAccountsConfig, type MaybeAccount, type MaybeEncodedAccount, type ReadonlyUint8Array } from "@solana/kit";
export declare const GLOBAL_CONFIG_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getGlobalConfigDiscriminatorBytes(): ReadonlyUint8Array;
export type GlobalConfig = {
    discriminator: ReadonlyUint8Array;
    tokenToSell: bigint;
    tokenToMint: bigint;
    virtualTokenReserve: bigint;
    virtualSolReserve: bigint;
    bump: number;
};
export type GlobalConfigArgs = {
    tokenToSell: number | bigint;
    tokenToMint: number | bigint;
    virtualTokenReserve: number | bigint;
    virtualSolReserve: number | bigint;
    bump: number;
};
export declare function getGlobalConfigEncoder(): Encoder<GlobalConfigArgs>;
export declare function getGlobalConfigDecoder(): Decoder<GlobalConfig>;
export declare function getGlobalConfigCodec(): Codec<GlobalConfigArgs, GlobalConfig>;
export declare function decodeGlobalConfig<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<GlobalConfig, TAddress>;
export declare function decodeGlobalConfig<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<GlobalConfig, TAddress>;
export declare function fetchGlobalConfig<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<GlobalConfig, TAddress>>;
export declare function fetchMaybeGlobalConfig<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<GlobalConfig, TAddress>>;
export declare function fetchAllGlobalConfig(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<GlobalConfig>[]>;
export declare function fetchAllMaybeGlobalConfig(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<GlobalConfig>[]>;
//# sourceMappingURL=globalConfig.d.ts.map