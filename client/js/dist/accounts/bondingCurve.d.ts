/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { fetchEncodedAccount, fetchEncodedAccounts, type Account, type Address, type Codec, type Decoder, type EncodedAccount, type Encoder, type FetchAccountConfig, type FetchAccountsConfig, type MaybeAccount, type MaybeEncodedAccount, type ReadonlyUint8Array } from '@solana/kit';
export declare const BONDING_CURVE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getBondingCurveDiscriminatorBytes(): ReadonlyUint8Array;
export type BondingCurve = {
    discriminator: ReadonlyUint8Array;
    virtualSolReserve: bigint;
    virtualTokenReserve: bigint;
    tokenSold: bigint;
    tokenMint: Address;
    isActive: boolean;
    bump: number;
};
export type BondingCurveArgs = {
    virtualSolReserve: number | bigint;
    virtualTokenReserve: number | bigint;
    tokenSold: number | bigint;
    tokenMint: Address;
    isActive: boolean;
    bump: number;
};
export declare function getBondingCurveEncoder(): Encoder<BondingCurveArgs>;
export declare function getBondingCurveDecoder(): Decoder<BondingCurve>;
export declare function getBondingCurveCodec(): Codec<BondingCurveArgs, BondingCurve>;
export declare function decodeBondingCurve<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<BondingCurve, TAddress>;
export declare function decodeBondingCurve<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<BondingCurve, TAddress>;
export declare function fetchBondingCurve<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<BondingCurve, TAddress>>;
export declare function fetchMaybeBondingCurve<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<BondingCurve, TAddress>>;
export declare function fetchAllBondingCurve(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<BondingCurve>[]>;
export declare function fetchAllMaybeBondingCurve(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<BondingCurve>[]>;
//# sourceMappingURL=bondingCurve.d.ts.map