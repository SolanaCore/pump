/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { combineCodec, fixDecoderSize, fixEncoderSize, getAddressEncoder, getBytesDecoder, getBytesEncoder, getProgramDerivedAddress, getStructDecoder, getStructEncoder, getU64Decoder, getU64Encoder, transformEncoder, } from "@solana/kit";
import { PUMP_PROGRAM_ADDRESS } from "../programs";
import { expectAddress, getAccountMetaFactory, } from "../shared";
export const BUY_TOKEN_DISCRIMINATOR = new Uint8Array([
    138, 127, 14, 91, 38, 87, 115, 105,
]);
export function getBuyTokenDiscriminatorBytes() {
    return fixEncoderSize(getBytesEncoder(), 8).encode(BUY_TOKEN_DISCRIMINATOR);
}
export function getBuyTokenInstructionDataEncoder() {
    return transformEncoder(getStructEncoder([
        ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
        ["maxSol", getU64Encoder()],
    ]), (value) => (Object.assign(Object.assign({}, value), { discriminator: BUY_TOKEN_DISCRIMINATOR })));
}
export function getBuyTokenInstructionDataDecoder() {
    return getStructDecoder([
        ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
        ["maxSol", getU64Decoder()],
    ]);
}
export function getBuyTokenInstructionDataCodec() {
    return combineCodec(getBuyTokenInstructionDataEncoder(), getBuyTokenInstructionDataDecoder());
}
export async function getBuyTokenInstructionAsync(input, config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    // Program address.
    const programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : PUMP_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        signer: { value: (_b = input.signer) !== null && _b !== void 0 ? _b : null, isWritable: true },
        tokenAta: { value: (_c = input.tokenAta) !== null && _c !== void 0 ? _c : null, isWritable: true },
        tokenEscrow: { value: (_d = input.tokenEscrow) !== null && _d !== void 0 ? _d : null, isWritable: false },
        bondingCurve: { value: (_e = input.bondingCurve) !== null && _e !== void 0 ? _e : null, isWritable: false },
        tokenMint: { value: (_f = input.tokenMint) !== null && _f !== void 0 ? _f : null, isWritable: false },
        systemProgram: { value: (_g = input.systemProgram) !== null && _g !== void 0 ? _g : null, isWritable: false },
        tokenProgram: { value: (_h = input.tokenProgram) !== null && _h !== void 0 ? _h : null, isWritable: false },
        associatedTokenProgram: {
            value: (_j = input.associatedTokenProgram) !== null && _j !== void 0 ? _j : null,
            isWritable: false,
        },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = Object.assign({}, input);
    // Resolve default values.
    if (!accounts.tokenAta.value) {
        accounts.tokenAta.value = await getProgramDerivedAddress({
            programAddress: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
            seeds: [
                getAddressEncoder().encode(expectAddress(accounts.signer.value)),
                getBytesEncoder().encode(new Uint8Array([
                    6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
                    121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
                    126, 255, 0, 169,
                ])),
                getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
            ],
        });
    }
    if (!accounts.bondingCurve.value) {
        accounts.bondingCurve.value = await getProgramDerivedAddress({
            programAddress,
            seeds: [
                getBytesEncoder().encode(new Uint8Array([66, 79, 78, 68, 73, 78, 71, 95, 67, 85, 82, 86, 69])),
                getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
            ],
        });
    }
    if (!accounts.tokenEscrow.value) {
        accounts.tokenEscrow.value = await getProgramDerivedAddress({
            programAddress: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
            seeds: [
                getAddressEncoder().encode(expectAddress(accounts.bondingCurve.value)),
                getBytesEncoder().encode(new Uint8Array([
                    6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
                    121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
                    126, 255, 0, 169,
                ])),
                getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
            ],
        });
    }
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            "11111111111111111111111111111111";
    }
    if (!accounts.tokenProgram.value) {
        accounts.tokenProgram.value =
            "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
    }
    if (!accounts.associatedTokenProgram.value) {
        accounts.associatedTokenProgram.value =
            "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
    }
    const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
    const instruction = {
        accounts: [
            getAccountMeta(accounts.signer),
            getAccountMeta(accounts.tokenAta),
            getAccountMeta(accounts.tokenEscrow),
            getAccountMeta(accounts.bondingCurve),
            getAccountMeta(accounts.tokenMint),
            getAccountMeta(accounts.systemProgram),
            getAccountMeta(accounts.tokenProgram),
            getAccountMeta(accounts.associatedTokenProgram),
        ],
        programAddress,
        data: getBuyTokenInstructionDataEncoder().encode(args),
    };
    return instruction;
}
export function getBuyTokenInstruction(input, config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    // Program address.
    const programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : PUMP_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        signer: { value: (_b = input.signer) !== null && _b !== void 0 ? _b : null, isWritable: true },
        tokenAta: { value: (_c = input.tokenAta) !== null && _c !== void 0 ? _c : null, isWritable: true },
        tokenEscrow: { value: (_d = input.tokenEscrow) !== null && _d !== void 0 ? _d : null, isWritable: false },
        bondingCurve: { value: (_e = input.bondingCurve) !== null && _e !== void 0 ? _e : null, isWritable: false },
        tokenMint: { value: (_f = input.tokenMint) !== null && _f !== void 0 ? _f : null, isWritable: false },
        systemProgram: { value: (_g = input.systemProgram) !== null && _g !== void 0 ? _g : null, isWritable: false },
        tokenProgram: { value: (_h = input.tokenProgram) !== null && _h !== void 0 ? _h : null, isWritable: false },
        associatedTokenProgram: {
            value: (_j = input.associatedTokenProgram) !== null && _j !== void 0 ? _j : null,
            isWritable: false,
        },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = Object.assign({}, input);
    // Resolve default values.
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            "11111111111111111111111111111111";
    }
    if (!accounts.tokenProgram.value) {
        accounts.tokenProgram.value =
            "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
    }
    if (!accounts.associatedTokenProgram.value) {
        accounts.associatedTokenProgram.value =
            "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
    }
    const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
    const instruction = {
        accounts: [
            getAccountMeta(accounts.signer),
            getAccountMeta(accounts.tokenAta),
            getAccountMeta(accounts.tokenEscrow),
            getAccountMeta(accounts.bondingCurve),
            getAccountMeta(accounts.tokenMint),
            getAccountMeta(accounts.systemProgram),
            getAccountMeta(accounts.tokenProgram),
            getAccountMeta(accounts.associatedTokenProgram),
        ],
        programAddress,
        data: getBuyTokenInstructionDataEncoder().encode(args),
    };
    return instruction;
}
export function parseBuyTokenInstruction(instruction) {
    if (instruction.accounts.length < 8) {
        // TODO: Coded error.
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            signer: getNextAccount(),
            tokenAta: getNextAccount(),
            tokenEscrow: getNextAccount(),
            bondingCurve: getNextAccount(),
            tokenMint: getNextAccount(),
            systemProgram: getNextAccount(),
            tokenProgram: getNextAccount(),
            associatedTokenProgram: getNextAccount(),
        },
        data: getBuyTokenInstructionDataDecoder().decode(instruction.data),
    };
}
