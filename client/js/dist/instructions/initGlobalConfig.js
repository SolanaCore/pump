/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { combineCodec, fixDecoderSize, fixEncoderSize, getBytesDecoder, getBytesEncoder, getProgramDerivedAddress, getStructDecoder, getStructEncoder, transformEncoder, } from '@solana/kit';
import { PUMP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory } from '../shared';
export const INIT_GLOBAL_CONFIG_DISCRIMINATOR = new Uint8Array([
    140, 136, 214, 48, 87, 0, 120, 255,
]);
export function getInitGlobalConfigDiscriminatorBytes() {
    return fixEncoderSize(getBytesEncoder(), 8).encode(INIT_GLOBAL_CONFIG_DISCRIMINATOR);
}
export function getInitGlobalConfigInstructionDataEncoder() {
    return transformEncoder(getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]), (value) => (Object.assign(Object.assign({}, value), { discriminator: INIT_GLOBAL_CONFIG_DISCRIMINATOR })));
}
export function getInitGlobalConfigInstructionDataDecoder() {
    return getStructDecoder([
        ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ]);
}
export function getInitGlobalConfigInstructionDataCodec() {
    return combineCodec(getInitGlobalConfigInstructionDataEncoder(), getInitGlobalConfigInstructionDataDecoder());
}
export async function getInitGlobalConfigInstructionAsync(input, config) {
    var _a, _b, _c, _d;
    // Program address.
    const programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : PUMP_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        globalConfig: { value: (_b = input.globalConfig) !== null && _b !== void 0 ? _b : null, isWritable: true },
        signer: { value: (_c = input.signer) !== null && _c !== void 0 ? _c : null, isWritable: true },
        systemProgram: { value: (_d = input.systemProgram) !== null && _d !== void 0 ? _d : null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Resolve default values.
    if (!accounts.globalConfig.value) {
        accounts.globalConfig.value = await getProgramDerivedAddress({
            programAddress,
            seeds: [
                getBytesEncoder().encode(new Uint8Array([
                    103, 108, 111, 98, 97, 108, 95, 99, 111, 110, 102, 105, 103,
                ])),
            ],
        });
    }
    if (!accounts.signer.value) {
        accounts.signer.value =
            '52nvBaMXujpVYf6zBUvmQtHEZc4kAncRJccXG99F6yrg';
    }
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.globalConfig),
            getAccountMeta(accounts.signer),
            getAccountMeta(accounts.systemProgram),
        ],
        programAddress,
        data: getInitGlobalConfigInstructionDataEncoder().encode({}),
    };
    return instruction;
}
export function getInitGlobalConfigInstruction(input, config) {
    var _a, _b, _c, _d;
    // Program address.
    const programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : PUMP_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        globalConfig: { value: (_b = input.globalConfig) !== null && _b !== void 0 ? _b : null, isWritable: true },
        signer: { value: (_c = input.signer) !== null && _c !== void 0 ? _c : null, isWritable: true },
        systemProgram: { value: (_d = input.systemProgram) !== null && _d !== void 0 ? _d : null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Resolve default values.
    if (!accounts.signer.value) {
        accounts.signer.value =
            '52nvBaMXujpVYf6zBUvmQtHEZc4kAncRJccXG99F6yrg';
    }
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.globalConfig),
            getAccountMeta(accounts.signer),
            getAccountMeta(accounts.systemProgram),
        ],
        programAddress,
        data: getInitGlobalConfigInstructionDataEncoder().encode({}),
    };
    return instruction;
}
export function parseInitGlobalConfigInstruction(instruction) {
    if (instruction.accounts.length < 3) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            globalConfig: getNextAccount(),
            signer: getNextAccount(),
            systemProgram: getNextAccount(),
        },
        data: getInitGlobalConfigInstructionDataDecoder().decode(instruction.data),
    };
}
