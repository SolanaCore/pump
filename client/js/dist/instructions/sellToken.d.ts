/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { PUMP_PROGRAM_ADDRESS } from '../programs';
export declare const SELL_TOKEN_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getSellTokenDiscriminatorBytes(): ReadonlyUint8Array;
export type SellTokenInstruction<TProgram extends string = typeof PUMP_PROGRAM_ADDRESS, TAccountSigner extends string | IAccountMeta<string> = string, TAccountTokenAta extends string | IAccountMeta<string> = string, TAccountTokenEscrow extends string | IAccountMeta<string> = string, TAccountBondingCurve extends string | IAccountMeta<string> = string, TAccountTokenMint extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountSigner extends string ? WritableSignerAccount<TAccountSigner> & IAccountSignerMeta<TAccountSigner> : TAccountSigner,
    TAccountTokenAta extends string ? WritableAccount<TAccountTokenAta> : TAccountTokenAta,
    TAccountTokenEscrow extends string ? WritableAccount<TAccountTokenEscrow> : TAccountTokenEscrow,
    TAccountBondingCurve extends string ? WritableAccount<TAccountBondingCurve> : TAccountBondingCurve,
    TAccountTokenMint extends string ? ReadonlyAccount<TAccountTokenMint> : TAccountTokenMint,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    TAccountAssociatedTokenProgram extends string ? ReadonlyAccount<TAccountAssociatedTokenProgram> : TAccountAssociatedTokenProgram,
    ...TRemainingAccounts
]>;
export type SellTokenInstructionData = {
    discriminator: ReadonlyUint8Array;
    maxToken: bigint;
};
export type SellTokenInstructionDataArgs = {
    maxToken: number | bigint;
};
export declare function getSellTokenInstructionDataEncoder(): Encoder<SellTokenInstructionDataArgs>;
export declare function getSellTokenInstructionDataDecoder(): Decoder<SellTokenInstructionData>;
export declare function getSellTokenInstructionDataCodec(): Codec<SellTokenInstructionDataArgs, SellTokenInstructionData>;
export type SellTokenAsyncInput<TAccountSigner extends string = string, TAccountTokenAta extends string = string, TAccountTokenEscrow extends string = string, TAccountBondingCurve extends string = string, TAccountTokenMint extends string = string, TAccountSystemProgram extends string = string, TAccountTokenProgram extends string = string, TAccountAssociatedTokenProgram extends string = string> = {
    signer: TransactionSigner<TAccountSigner>;
    tokenAta: Address<TAccountTokenAta>;
    tokenEscrow: Address<TAccountTokenEscrow>;
    bondingCurve?: Address<TAccountBondingCurve>;
    tokenMint: Address<TAccountTokenMint>;
    systemProgram?: Address<TAccountSystemProgram>;
    tokenProgram?: Address<TAccountTokenProgram>;
    associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
    maxToken: SellTokenInstructionDataArgs['maxToken'];
};
export declare function getSellTokenInstructionAsync<TAccountSigner extends string, TAccountTokenAta extends string, TAccountTokenEscrow extends string, TAccountBondingCurve extends string, TAccountTokenMint extends string, TAccountSystemProgram extends string, TAccountTokenProgram extends string, TAccountAssociatedTokenProgram extends string, TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS>(input: SellTokenAsyncInput<TAccountSigner, TAccountTokenAta, TAccountTokenEscrow, TAccountBondingCurve, TAccountTokenMint, TAccountSystemProgram, TAccountTokenProgram, TAccountAssociatedTokenProgram>, config?: {
    programAddress?: TProgramAddress;
}): Promise<SellTokenInstruction<TProgramAddress, TAccountSigner, TAccountTokenAta, TAccountTokenEscrow, TAccountBondingCurve, TAccountTokenMint, TAccountSystemProgram, TAccountTokenProgram, TAccountAssociatedTokenProgram>>;
export type SellTokenInput<TAccountSigner extends string = string, TAccountTokenAta extends string = string, TAccountTokenEscrow extends string = string, TAccountBondingCurve extends string = string, TAccountTokenMint extends string = string, TAccountSystemProgram extends string = string, TAccountTokenProgram extends string = string, TAccountAssociatedTokenProgram extends string = string> = {
    signer: TransactionSigner<TAccountSigner>;
    tokenAta: Address<TAccountTokenAta>;
    tokenEscrow: Address<TAccountTokenEscrow>;
    bondingCurve: Address<TAccountBondingCurve>;
    tokenMint: Address<TAccountTokenMint>;
    systemProgram?: Address<TAccountSystemProgram>;
    tokenProgram?: Address<TAccountTokenProgram>;
    associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
    maxToken: SellTokenInstructionDataArgs['maxToken'];
};
export declare function getSellTokenInstruction<TAccountSigner extends string, TAccountTokenAta extends string, TAccountTokenEscrow extends string, TAccountBondingCurve extends string, TAccountTokenMint extends string, TAccountSystemProgram extends string, TAccountTokenProgram extends string, TAccountAssociatedTokenProgram extends string, TProgramAddress extends Address = typeof PUMP_PROGRAM_ADDRESS>(input: SellTokenInput<TAccountSigner, TAccountTokenAta, TAccountTokenEscrow, TAccountBondingCurve, TAccountTokenMint, TAccountSystemProgram, TAccountTokenProgram, TAccountAssociatedTokenProgram>, config?: {
    programAddress?: TProgramAddress;
}): SellTokenInstruction<TProgramAddress, TAccountSigner, TAccountTokenAta, TAccountTokenEscrow, TAccountBondingCurve, TAccountTokenMint, TAccountSystemProgram, TAccountTokenProgram, TAccountAssociatedTokenProgram>;
export type ParsedSellTokenInstruction<TProgram extends string = typeof PUMP_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        signer: TAccountMetas[0];
        tokenAta: TAccountMetas[1];
        tokenEscrow: TAccountMetas[2];
        bondingCurve: TAccountMetas[3];
        tokenMint: TAccountMetas[4];
        systemProgram: TAccountMetas[5];
        tokenProgram: TAccountMetas[6];
        associatedTokenProgram: TAccountMetas[7];
    };
    data: SellTokenInstructionData;
};
export declare function parseSellTokenInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSellTokenInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=sellToken.d.ts.map