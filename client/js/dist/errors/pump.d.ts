/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM, type SolanaError } from "@solana/kit";
/** OverflowDetected: Overflow detected */
export declare const PUMP_ERROR__OVERFLOW_DETECTED = 6000;
/** UnderflowDetected: Underflow detected */
export declare const PUMP_ERROR__UNDERFLOW_DETECTED = 6001;
/** InvalidTokenAmount: the token amount can't be zero */
export declare const PUMP_ERROR__INVALID_TOKEN_AMOUNT = 6002;
/** InvalidSolAmount: the sol amount can't be zero */
export declare const PUMP_ERROR__INVALID_SOL_AMOUNT = 6003;
/** InvalidInputs: Invalis Inputs check the that either name, ticker, uri or description are not empty */
export declare const PUMP_ERROR__INVALID_INPUTS = 6004;
export type PumpError = typeof PUMP_ERROR__INVALID_INPUTS | typeof PUMP_ERROR__INVALID_SOL_AMOUNT | typeof PUMP_ERROR__INVALID_TOKEN_AMOUNT | typeof PUMP_ERROR__OVERFLOW_DETECTED | typeof PUMP_ERROR__UNDERFLOW_DETECTED;
export declare function getPumpErrorMessage(code: PumpError): string;
export declare function isPumpError<TProgramErrorCode extends PumpError>(error: unknown, transactionMessage: {
    instructions: Record<number, {
        programAddress: Address;
    }>;
}, code?: TProgramErrorCode): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> & Readonly<{
    context: Readonly<{
        code: TProgramErrorCode;
    }>;
}>;
//# sourceMappingURL=pump.d.ts.map