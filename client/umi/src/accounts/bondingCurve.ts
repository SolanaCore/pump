/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type BondingCurve = Account<BondingCurveAccountData>;

export type BondingCurveAccountData = {
  discriminator: Uint8Array;
  virtualSolReserve: bigint;
  virtualTokenReserve: bigint;
  tokenSold: bigint;
  tokenMint: PublicKey;
  isActive: boolean;
  bump: number;
};

export type BondingCurveAccountDataArgs = {
  virtualSolReserve: number | bigint;
  virtualTokenReserve: number | bigint;
  tokenSold: number | bigint;
  tokenMint: PublicKey;
  isActive: boolean;
  bump: number;
};

export function getBondingCurveAccountDataSerializer(): Serializer<
  BondingCurveAccountDataArgs,
  BondingCurveAccountData
> {
  return mapSerializer<
    BondingCurveAccountDataArgs,
    any,
    BondingCurveAccountData
  >(
    struct<BondingCurveAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['virtualSolReserve', u64()],
        ['virtualTokenReserve', u64()],
        ['tokenSold', u64()],
        ['tokenMint', publicKeySerializer()],
        ['isActive', bool()],
        ['bump', u8()],
      ],
      { description: 'BondingCurveAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([23, 183, 248, 55, 96, 216, 172, 96]),
    })
  ) as Serializer<BondingCurveAccountDataArgs, BondingCurveAccountData>;
}

export function deserializeBondingCurve(rawAccount: RpcAccount): BondingCurve {
  return deserializeAccount(rawAccount, getBondingCurveAccountDataSerializer());
}

export async function fetchBondingCurve(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<BondingCurve> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'BondingCurve');
  return deserializeBondingCurve(maybeAccount);
}

export async function safeFetchBondingCurve(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<BondingCurve | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeBondingCurve(maybeAccount) : null;
}

export async function fetchAllBondingCurve(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<BondingCurve[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'BondingCurve');
    return deserializeBondingCurve(maybeAccount);
  });
}

export async function safeFetchAllBondingCurve(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<BondingCurve[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeBondingCurve(maybeAccount as RpcAccount));
}

export function getBondingCurveGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'pump',
    'FPf834XQpnVNgFTKtihkik9Bc9c57859SdXAMNrQ554Q'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      virtualSolReserve: number | bigint;
      virtualTokenReserve: number | bigint;
      tokenSold: number | bigint;
      tokenMint: PublicKey;
      isActive: boolean;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      virtualSolReserve: [8, u64()],
      virtualTokenReserve: [16, u64()],
      tokenSold: [24, u64()],
      tokenMint: [32, publicKeySerializer()],
      isActive: [64, bool()],
      bump: [65, u8()],
    })
    .deserializeUsing<BondingCurve>((account) =>
      deserializeBondingCurve(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([23, 183, 248, 55, 96, 216, 172, 96])
    );
}
