/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type GlobalConfig = Account<GlobalConfigAccountData>;

export type GlobalConfigAccountData = {
  discriminator: Uint8Array;
  tokenToSell: bigint;
  tokenToMint: bigint;
  virtualTokenReserve: bigint;
  virtualSolReserve: bigint;
  bump: number;
};

export type GlobalConfigAccountDataArgs = {
  tokenToSell: number | bigint;
  tokenToMint: number | bigint;
  virtualTokenReserve: number | bigint;
  virtualSolReserve: number | bigint;
  bump: number;
};

export function getGlobalConfigAccountDataSerializer(): Serializer<
  GlobalConfigAccountDataArgs,
  GlobalConfigAccountData
> {
  return mapSerializer<
    GlobalConfigAccountDataArgs,
    any,
    GlobalConfigAccountData
  >(
    struct<GlobalConfigAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['tokenToSell', u64()],
        ['tokenToMint', u64()],
        ['virtualTokenReserve', u64()],
        ['virtualSolReserve', u64()],
        ['bump', u8()],
      ],
      { description: 'GlobalConfigAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([149, 8, 156, 202, 160, 252, 176, 217]),
    })
  ) as Serializer<GlobalConfigAccountDataArgs, GlobalConfigAccountData>;
}

export function deserializeGlobalConfig(rawAccount: RpcAccount): GlobalConfig {
  return deserializeAccount(rawAccount, getGlobalConfigAccountDataSerializer());
}

export async function fetchGlobalConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GlobalConfig> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'GlobalConfig');
  return deserializeGlobalConfig(maybeAccount);
}

export async function safeFetchGlobalConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GlobalConfig | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeGlobalConfig(maybeAccount) : null;
}

export async function fetchAllGlobalConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GlobalConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'GlobalConfig');
    return deserializeGlobalConfig(maybeAccount);
  });
}

export async function safeFetchAllGlobalConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GlobalConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeGlobalConfig(maybeAccount as RpcAccount));
}

export function getGlobalConfigGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'pump',
    'FPf834XQpnVNgFTKtihkik9Bc9c57859SdXAMNrQ554Q'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      tokenToSell: number | bigint;
      tokenToMint: number | bigint;
      virtualTokenReserve: number | bigint;
      virtualSolReserve: number | bigint;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      tokenToSell: [8, u64()],
      tokenToMint: [16, u64()],
      virtualTokenReserve: [24, u64()],
      virtualSolReserve: [32, u64()],
      bump: [40, u8()],
    })
    .deserializeUsing<GlobalConfig>((account) =>
      deserializeGlobalConfig(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([149, 8, 156, 202, 160, 252, 176, 217])
    );
}
