//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum PumpError {
    /// 6000 - Overflow detected
    #[error("Overflow detected")]
    OverflowDetected = 0x1770,
    /// 6001 - Underflow detected
    #[error("Underflow detected")]
    UnderflowDetected = 0x1771,
    /// 6002 - the token amount can't be zero
    #[error("the token amount can't be zero")]
    InvalidTokenAmount = 0x1772,
    /// 6003 - the sol amount can't be zero
    #[error("the sol amount can't be zero")]
    InvalidSolAmount = 0x1773,
    /// 6004 - Invalis Inputs check the that either name, ticker, uri or description are not empty
    #[error("Invalis Inputs check the that either name, ticker, uri or description are not empty")]
    InvalidInputs = 0x1774,
    /// 6005 - insufficient funds in the account 'from' account
    #[error("insufficient funds in the account 'from' account")]
    InsufficientFunds = 0x1775,
    /// 6006 - the give token mint address is not owned by the bonding_curve
    #[error("the give token mint address is not owned by the bonding_curve")]
    InvalidOwner = 0x1776,
    /// 6007 - value didn't set MetadataFailed
    #[error("value didn't set MetadataFailed")]
    MetadataFailed = 0x1777,
}

impl solana_program_error::PrintProgramError for PumpError {
    fn print<E>(&self) {
        solana_msg::msg!(&self.to_string());
    }
}

impl<T> solana_decode_error::DecodeError<T> for PumpError {
    fn type_of() -> &'static str {
        "PumpError"
    }
}

